@{
    ViewBag.Title = "Home Page";
}


@section head
{
    <style type="text/css">
        
        .template {
            display: none;
        }

        #hand ul {
            padding: 0;
            margin: 0;
            list-style: none;
            margin-left: auto;
            margin-right: auto;
            margin-bottom: 20px;
        }

        #players .bet {
            display: none;
        }

        #players li.ready {
            background: #090;
            color: #fff;
        }

        #players.turn .bet {
            display: initial;
        }

        #hand li {
            font-size: 20pt;
            float: left;
            width: 100px;
            line-height: 150px;
            text-align: center;
            border: 1px solid #aaa;
            margin-right: 20px;
            cursor: pointer;
            transition: background 0.2s, color 0.2s;
        }

        #hand li:hover {
            background: #aaa;
        }

        #hand li.selected {
            color: #fff;
            background: #555;
        }

        #hand li:last-child {
            margin: 0;
        }

        #hand ul:after {

            content: " ";
            display: table;
            clear: both
        }

    </style>
}

@section scripts
{
    <script src="@Url.Content("~/Scripts/jquery.signalR-2.2.0.min.js")"></script>
    <script src="@Url.Content("~/signalr/hubs")"></script>
    <script type="text/javascript">

        var __ = function(selector, el) {
            return (el || document).querySelectorAll(selector);
        }

        var _ = function(selector, el) {
            return (el || document).querySelector(selector);
        }

        var parseHtmlHelper = document.createElement("div");
        var parseHtml = function(html) {
            parseHtmlHelper.innerHTML = html;
            return parseHtmlHelper.firstElementChild;
        }
        /*

        Fruit for thought

        var Player = function(name) {

            var _this = this;
            var _name = name;

            var _props = {
                name: {
                    get: function() {
                        return _name;
                    },
                    set: function (val) {
                        if (val === _name) {
                            return;
                        }

                        _name = val;
                    }
                } 
            }

            Object.defineProperties(this, _props);
        };

        var PlayerListItem = function(player) {

            player.propertyChanged("name", function() {

            });

        }
        */
        var playersList = new (function(ul) {
            var _el_itemTemplate = _(".template", ul);
            ul.removeChild(_el_itemTemplate);
            _el_itemTemplate.classList.remove("template");
            var itemTemplate = _el_itemTemplate.outerHTML;

            var _this = this;
            var _ul = ul;
            var _players = {};

            //
            this.get = function (cid) {
                return _players[cid];
            }

            //
            this.turn = function(values) {

                _ul.classList.add("turn");

                for (var i in values) {
                    if (values.hasOwnProperty(i)) {
                        var player = _this.get(i);
                        player.el_bet.innerHTML = values[i];
                    }
                }
            };

            //
            this.hasMadeBet = function(cid) {
                _this.get(cid).li.classList.add("ready");
            };

            // 
            this.add = function(cid, playerName) {

                var player = { cid: cid, name: playerName };
                var li = parseHtml(itemTemplate);
                player.li = li;
                player.el_playerName = _(".name", li);
                player.el_bet = _(".bet", li);

                player.el_playerName.innerHTML = player.name;

                _players[cid] = player;

                ul.appendChild(li);
            };

            //
            this.remove = function(cid) {
                var player = _players[cid];
                if (player) {
                    _ul.removeChild(player.li);
                }
                delete _players[cid];
            };

            this.clearBets = function() {
                
                _ul.classList.remove("turn");

                for (var i in _players) {
                    if (_players.hasOwnProperty(i)) {
                        var player = _players[i];
                        player.li.classList.remove("ready");
                        player.el_bet.innerHTML = "";
                    }
                }

            }

        })(_("#players"));


        var hand = new (function(container) {

            var _selected;

            var lis = __("li", container);
            for (var i = 0; i < lis.length; i++) {

                var li = lis[i];
                var val = li.textContent || li.innerText;
                (function scope(li, val) {

                    li.addEventListener("click", function() {
                        var res = pokerTable.server.bet(val);
                        console.log(res);

                        if (li.classList.contains("selected")) {
                            _selected = undefined;
                            li.classList.remove("selected");
                        } else {
                            if (_selected) {
                                _selected.classList.remove("selected");
                            }
                            li.classList.add("selected");
                            _selected = li;
                        }
                    });

                })(li, val);
            }

            this.reset = function() {
                
                if (_selected) {
                    _selected.classList.remove("selected");
                    _selected = undefined;
                }

            }

        })(_("#hand"));


        var pokerTable = $.connection.pokerTable;
        pokerTable.client.notifyNewPlayer = playersList.add;
        pokerTable.client.notifyPlayerLeft = playersList.remove;
        pokerTable.client.hasMadeBet = playersList.hasMadeBet;
        pokerTable.client.turn = playersList.turn;

        pokerTable.client.reset = function () {
            playersList.clearBets();
            hand.reset();
        };

        var _el_joinform = _("#join-form");
        var _el_name = _("#name", _el_joinform);

        _el_joinform.addEventListener("submit", function(e) {
            e.preventDefault();

            var res = pokerTable.server.join(_el_name.value);
            console.log(res);

            // show table

        });

        var _el_btnReset = _("#reset");
        _el_btnReset.addEventListener("click", function(e) {
            pokerTable.server.reset();
        });

        var init = function() {
            pokerTable.server.getAllPlayers()
                .done(function(players) {

                    // warmed up. remove overlay

                    // show all players
                    for (var i in players) {
                        if (players.hasOwnProperty(i)) {
                            playersList.add(i, players[i]);
                        }
                    }
                });
        }

        // Start the connection
        $.connection.hub
            .start()
            .then(init);

    </script>
}

    <div id="loading-overlay">
        Warming up. Please wait.
    </div>

    <form id="join-form">

        <input type="text" id="name"/>
        <button type="submit">Join</button>

    </form>

Players
<ul id="players">
    <li class="template">
        <span class="name"></span>
        <span class="bet"></span>
    </li>
</ul>

<div id="hand">

    <ul class="low">
        <li>0</li>
        <li>1/2</li>
        <li>1</li>
        <li>2</li>
        <li>3</li>
        <li>5</li>
        <li>8</li>
    </ul>

    <ul class="high">
        <li>13</li>
        <li>20</li>
        <li>40</li>
        <li>100</li>
        <li>?</li>
        <li>&#x221e;</li>
    </ul>

</div>

<button id="reset">Reset</button>